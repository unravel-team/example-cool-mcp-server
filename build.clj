(ns build
  (:refer-clojure :exclude [test])
  (:require [clojure.tools.build.api :as b]
            ;; [deps-deploy.deps-deploy :as dd]
  ))

(def lib 'tech.unravel/example-cool-mcp-server)
(def version "1.0.0")
#_; alternatively, use MAJOR.MINOR.COMMITS:
  (def version (format "1.0.%s" (b/git-count-revs nil)))
(def class-dir "target/classes")
(def main-ns 'tech.unravel.example-cool-mcp-server)

(defn test
  "Run all the tests."
  [opts]
  (let [basis (b/create-basis {:aliases [:test]})
        cmds (b/java-command {:basis basis,
                              :main 'clojure.main,
                              :main-args ["-m" "cognitect.test-runner"]})
        {:keys [exit]} (b/process cmds)]
    (when-not (zero? exit) (throw (ex-info "Tests failed" {}))))
  opts)

(defn- pom-template
  [version]
  [[:description
    "FIXME: I'm an MCP server, generated by the tech.unravel/mcp-clojure-server-template template."]
   [:url "https://github.com/tech.unravel/example-cool-mcp-server"]
   [:licenses
    [:license [:name "MIT License"]
     [:url "https://opensource.org/license/MIT"]]]
   [:developers [:developer [:name "Unravel.tech Engineering"]]]
   [:scm [:url "https://github.com/tech.unravel/example-cool-mcp-server"]
    [:connection
     "scm:git:https://github.com/tech.unravel/example-cool-mcp-server.git"]
    [:developerConnection
     "scm:git:ssh:git@github.com:tech.unravel/example-cool-mcp-server.git"]
    [:tag (str "v" version)]]])

(defn- uber-opts
  [opts]
  (assoc opts
    :lib lib
    :version version
    :main main-ns
    :uber-file (format "target/%s-%s.jar" lib version)
    :basis (b/create-basis {})
    :class-dir class-dir
    :src-dirs ["src"]
    :pom-data (pom-template version)
    :ns-compile [main-ns]))

(defn ci
  "Run the CI pipeline of tests (and build the uberjar)."
  [opts]
  (test opts)
  (b/delete {:path "target"})
  (let [opts (uber-opts opts)]
    (println "\nWriting pom.xml...")
    (b/write-pom opts)
    (println "\nCopying source...")
    (b/copy-dir {:src-dirs ["resources" "src"], :target-dir class-dir})
    (println "\nCompiling ...")
    (b/compile-clj opts)
    (println "\nBuilding JAR..." (:uber-file opts))
    (b/uber opts))
  opts)

(defn deploy
  "Deploy the JAR to production."
  [opts]
  ;;; I don't do anything right now
  ;; (let [{:keys [jar-file] :as opts} (jar-opts opts)]
  ;;   (dd/deploy {:installer :remote :artifact (b/resolve-path jar-file)
  ;;               :pom-file (b/pom-path (select-keys opts [:lib
  ;;               :class-dir]))}))
  opts)
